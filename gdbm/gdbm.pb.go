// Code generated by protoc-gen-go.
// source: gdbm.proto
// DO NOT EDIT!

/*
Package gdbm is a generated protocol buffer package.

It is generated from these files:
	gdbm.proto

It has these top-level messages:
	Request
	Entry
*/
package gdbm

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Request struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

type Entry struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}

func init() {
}

// Client API for Gdbm service

type GdbmClient interface {
	// Sends a greeting
	Insert(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Entry, error)
	Replace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Entry, error)
	Fetch(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Entry, error)
}

type gdbmClient struct {
	cc *grpc.ClientConn
}

func NewGdbmClient(cc *grpc.ClientConn) GdbmClient {
	return &gdbmClient{cc}
}

func (c *gdbmClient) Insert(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/gdbm.Gdbm/Insert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gdbmClient) Replace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/gdbm.Gdbm/Replace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gdbmClient) Fetch(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/gdbm.Gdbm/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gdbm service

type GdbmServer interface {
	// Sends a greeting
	Insert(context.Context, *Request) (*Entry, error)
	Replace(context.Context, *Request) (*Entry, error)
	Fetch(context.Context, *Request) (*Entry, error)
}

func RegisterGdbmServer(s *grpc.Server, srv GdbmServer) {
	s.RegisterService(&_Gdbm_serviceDesc, srv)
}

func _Gdbm_Insert_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(Request)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GdbmServer).Insert(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Gdbm_Replace_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(Request)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GdbmServer).Replace(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Gdbm_Fetch_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(Request)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GdbmServer).Fetch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Gdbm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gdbm.Gdbm",
	HandlerType: (*GdbmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Gdbm_Insert_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _Gdbm_Replace_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Gdbm_Fetch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
